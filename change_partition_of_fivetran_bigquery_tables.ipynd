{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5ac43026",
   "metadata": {},
   "source": [
    "# Partition all Fivetran tables automaticly for BigQuery\n",
    "### About:\n",
    "\n",
    "Changing your Fivetran tables to partitioned tables using the _fivetran_synced fields will save you a lot of money, but it is boring and time consuming to setup if you have a lot of tables. \n",
    "\n",
    "This notebooks automates the process. All you have to do is to enter your project_id, your Fivetran datasets and press start.\n",
    "\n",
    "For info about getting started with the Python BigQuery library read [here](https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68219244",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "from google.cloud import bigquery\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7aee7393",
   "metadata": {},
   "source": [
    "### Set variables\n",
    "**Make sure to copy the names from your BigQuery instance**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "9d3ee000",
   "metadata": {},
   "outputs": [],
   "source": [
    "project_id = \"your-project-id\"\n",
    "\n",
    "fivetran_datasets = ['facebook_ads',\n",
    "                     'facebook_pages',\n",
    "                     'fivetran_log',\n",
    "                     'google_ads',\n",
    "                     'google_search_console',\n",
    "                     'instagram_business',\n",
    "                     'microsoft_ads',\n",
    "                     'salesforce_marketing_cloud',\n",
    "                     'zendesk']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91009bb3",
   "metadata": {},
   "source": [
    "### The for loop that converts your tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "eefc182c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "facebook_ads.custom_audience_history has now been partitioned\n"
     ]
    }
   ],
   "source": [
    "# Loop through provided datasets\n",
    "for dataset in fivetran_datasets:\n",
    "    # Get tables in dataset\n",
    "    client = bigquery.Client(project_id)\n",
    "    tables = client.list_tables(dataset)\n",
    "    # Add table names to list\n",
    "    tables_currently_in_destination_dataset = []\n",
    "    for table in tables:\n",
    "        tables_currently_in_destination_dataset.append(table.table_id)\n",
    "    # loop through list of tables in dataset and get column names from each table\n",
    "    for table in tables_currently_in_destination_dataset:\n",
    "        query = \"\"\"\n",
    "        SELECT\n",
    "          column_name\n",
    "        FROM (\n",
    "          SELECT\n",
    "            *\n",
    "          FROM\n",
    "            {dataset_name}.INFORMATION_SCHEMA.COLUMNS )\n",
    "        WHERE\n",
    "          table_name = \"{table_name}\"\n",
    "        \"\"\".format(dataset_name = dataset, table_name = table)\n",
    "        client = bigquery.Client(project_id)\n",
    "        table_column_names = client.query(query).to_dataframe()\n",
    "        # If a table has a _fivetran_synced column, we want to partition the table by it\n",
    "        # Check Fivetran guide about the code to partition a table: https://fivetran.com/docs/destinations/bigquery/partition-table\n",
    "        if table_column_names['column_name'].str.contains('_fivetran_synced').any():\n",
    "            query = \"\"\"\n",
    "            create or replace table {dataset_name}.copy_{table_name}\n",
    "            partition by date( _fivetran_synced )  as select * from {dataset_name}.{table_name}; drop table {dataset_name}.{table_name};\n",
    "            create or replace table {dataset_name}.{table_name}\n",
    "            partition by date( _fivetran_synced ) as select * from {dataset_name}.copy_{table_name}; drop table {dataset_name}.copy_{table_name};\n",
    "            \"\"\".format(dataset_name = dataset, table_name = table)\n",
    "            response = client.query(query)\n",
    "            print('{dataset_name}.{table_name} has now been partitioned'.format(dataset_name = dataset, table_name = table))\n",
    "        else:\n",
    "            print('{} does not contain _fivetran_synced and is unchanged'.format(table))\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "environment": {
   "name": "common-cpu.m65",
   "type": "gcloud",
   "uri": "gcr.io/deeplearning-platform-release/base-cpu:m65"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
